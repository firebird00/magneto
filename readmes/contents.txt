! ----------------------------------------------------------------------------------------------------------------------------------
! --- Quarkwood Magneto 8.2 --------------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------------------------------------
! --- Table of Contents ------------------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------------------------------------
! --- This file is best viewed with a window at least 135 characters wide. ---------------------------------------------------------
! ----------------------------------------------------------------------------------------------------------------------------------


  NOTE: each subroutine/function has a five character keycode. 
    The first three characters (letters) indicate the module name.
    The last two characters (numbers) indicate the position within the code file.
  For example: [FLU01] is the first subroutine in the fluid module (B-fluid-mod.f90). 

  Once a file is open, you can quickly jump to a subroutine/module by searching for the
  keycode within square brackets, for example "[FLU01]".


! ----------------------------------------------------------------------------------------------------------------------------------


A: The Setup Module
===================
-- Contains initial settings and some basic functions.


GUIDES
------

- [SET_A]: Settings and Initial Conditions
- [SET_B]: Boundary Conditions
- [SET_C]: Magnetohydrodynamics Units



FUNCTIONS AND SUBROUTINES
-------------------------

- [SET01]: function Dotproduct (a, b)
           Calculate the Dot Product

- [SET02]: function Create_vector (a, b, c)
           Create Vector (from three scalar values)

- [SET03]: function Create_vector7 (a, b, c, d, e, f, g)
           Create Vector (from seven scalar values)



! ----------------------------------------------------------------------------------------------------------------------------------


B: The Fluid Module
===================
-- Main variables: the 3D fluid and magnetic field variables.
-- Main actions: EOS calculations; determine fluid properties; output data to file.


GUIDES
------

- [FLU_A]: Output Data - Version A


FUNCTIONS AND SUBROUTINES
-------------------------

- [FLU01]: subroutine Initialise_fluid ()
           Initalise Fluid

- [FLU02]: function Calculate_energy_EOS (dens_val, pres_val, gamma_val, velc_squrd, magf_squrd)
           Calculate the Energy using an Ideal Equation of State

- [FLU03]: function Calculate_pressure_EOS (dens_val, ergy_val, gamma_val, velc_squrd, magf_squrd)
           Calculate the Pressure using an Ideal Equation of State

- [FLU04]: function Calculate_total_pressure (thermal_pressure, magf_squrd)
           Calculate Total Pressure

- [FLU05]: function Calculate_gas_pressure (total_pressure, magf_squrd)
           Calculate Gas Pressure (from total pressure)

- [FLU06]: function MHDF (power)
           Determine MHD Factor (depending on units used)

- [FLU07]: subroutine Determine_timestep ()
           Determine the Timestep (using CFL condition)

- [FLU08]: subroutine Output_data_A (i, j, k, num)
           Output Data
             >> Version A: 1D Output (density; pressure; y-velocity; y-magnetic field)

- [FLU09]: subroutine Output_data_B (num)
           Output Data
             >> Version B: 2D Output (density; thermal pressure; magnetic pressure; velocity squared)

- [FLU10]: subroutine Output_data_C (num)
           Output Data
             >> Version C: Mixed Output (magnetic field components: z- in 2D; transverse in 1D)

- [FLU11]: subroutine Save_restart_files ()
           Save Restart Files

- [FLU12]: subroutine Deallocate_fluid ()
           Deallocate the Fluid



! ----------------------------------------------------------------------------------------------------------------------------------


C: The Tests Module
===================
-- Main actions: define initial conditions. 


GUIDES
------

- [TES_A]: More Test Cases...



FUNCTIONS AND SUBROUTINES
-------------------------

- [TES01]: subroutine Set_initial_conditions_A ()
           Set Initial Conditions of Fluid
             >> Version A: Sod's 1D Shock Tube Test (magnetic)

- [TES02]: subroutine Set_initial_conditions_B ()
           Set Initial Conditions of Fluid
             >> Version B: Circularly Polarised Alfven Waves

- [TES03]: subroutine Set_initial_conditions_C ()
           Set Initial Conditions of Fluid
             >> Version C: The Blast Problem 

- [TES04]: subroutine Set_initial_conditions_D ()
           Set Initial Conditions of Fluid
             >> Version D: The Orszag-Tang Vortex

- [TES05]: subroutine Set_initial_conditions_E ()
           Set Initial Conditions of Fluid
             >> Version E: The MHD Rotor Problem

- [TES06]: subroutine Set_initial_conditions_F ()
           Set Initial Conditions of Fluid
             >> Version F: The Kelvin-Helmholtz Instability

- [TES07]: subroutine Load_restart_file ()
           Load a Restart File



! ----------------------------------------------------------------------------------------------------------------------------------


D: The Grids Module
===================
-- Main variables: 1D row versions of the fluid and magnetic field variables.
-- Main actions: extract 1D row from 3D grid; return 1D row to 3D grid.


FUNCTIONS AND SUBROUTINES
-------------------------

- [GRI01]: subroutine Initialise_grids ()
           Initialise the Grids

- [GRI02]: subroutine Clear_1D_data ()
           Clear the 1D Data

- [GRI03]: subroutine Initialise_magnetic_field_arrays ()
           Initialise the Magnetic Field Arrays

- [GRI04]: subroutine Extract_row_x (j_fixed, k_fixed)
           Extract Row from the x-Direction

- [GRI05]: subroutine Extract_row_y (i_fixed, k_fixed)
           Extract Row from the y-Direction

- [GRI06]: subroutine Extract_row_z (i_fixed, j_fixed)
           Extract Row from the z-Direction

- [GRI07]: subroutine Add_boundaries (quant)
           Add Boundaries

- [GRI08]: subroutine Return_row_x (j_fixed, k_fixed)
           Return Row from the x-Direction

- [GRI09]: subroutine Return_row_y (i_fixed, k_fixed)
           Return Row from the y-Direction

- [GRI10]: subroutine Return_row_z (i_fixed, j_fixed)
           Return Row from the z-Direction

- [GRI11]: subroutine Deallocate_grids ()
           Deallocate the Grids



! ----------------------------------------------------------------------------------------------------------------------------------


E: The Reconstruction Module
============================
-- Main variables: the left and right Riemann input states for the state variables.
-- Main actions: determine these input states.


GUIDES
------

- [REC_A]: Cell-centred vs Face-Centred Values



FUNCTIONS AND SUBROUTINES
-------------------------

- [REC01]: subroutine Initialise_input_states ()
           Initialise the Riemann Problem Input States

- [REC02]: subroutine Determine_Riemann_input_TVD ()
           Determine the Input States for the Riemann Problem (using Balsara's TVD Scheme)

- [REC03]: subroutine Determine_Riemann_input_PPM ()
  	   Determine the Input States for the Riemann Problem (using Piecewise Parabolic Method)
             --> based on Stone et al., Astrophys. J. Suppl. S., 178, 137 (2008)

- [REC04]: subroutine Determine_Riemann_input_PPMCS ()
           Determine the Input States for the Riemann Problem (using Piecewise Parabolic Method: CS Edition)
             --> based on Colella and Sekora, J. Comput. Phys., 227, 7069 (2008)

- [REC05]: function minmod (x, y)
           General Minmod Function

- [REC06]: subroutine Calculate_eigensystem ()
           Calculate the Eigen-system

- [REC07]: subroutine Deallocate_input_states ()
           Deallocate the Input States



! ----------------------------------------------------------------------------------------------------------------------------------


F: The Riemann Solver Module
============================
-- Main variables: the inter-cell flxues for the state variables.
-- Main actions: determine these inter-cell fluxes.


FUNCTIONS AND SUBROUTINES
-------------------------

- [SOL01]: subroutine Initialise_solver ()
           Initialise the Solver

- [SOL02]: subroutine Calculate_intercell_fluxes_HLLD ()
           Calculating the Inter-cell Fluxes (HLLD Edition)

- [SOL03]: function roeavg (rhoL, rhoR, varL, varR)
           Calculating the Roe Averages

- [SOL04]: function HLL_State (SL, SR, FL, FR, UL, UR)
           Calculating the HLL State

- [SOL05]: subroutine Deallocate_solver ()
           Deallocate the Solver
  


! ----------------------------------------------------------------------------------------------------------------------------------


G: The Evolve Module
====================
- Main actions: evolve the entire grid for one timestep; evolve individual rows.


FUNCTIONS AND SUBROUTINES
-------------------------

- [EVO01]: subroutine Initialise_simulation ()
           Initialise the Simulation

- [EVO02]: subroutine Evolve_grid ()
           Evolve the Grid

- [EVO03]: subroutine Evolve_x_direction ()
           Evolve the x-Direction

- [EVO04]: subroutine Evolve_y_direction ()
           Evolve the y-Direction

- [EVO05]: subroutine Evolve_z_direction ()
           Evolve the z-Direction

- [EVO06]: subroutine Evolve_row ()
           Evolve the Row

- [EVO07]: subroutine Finish_magnetic_field_evolution ()
           Finishing the Magnetic Field Evolution

- [EVO08]: subroutine Shut_down_simulation ()
           Shut Down the Simulation 



! ----------------------------------------------------------------------------------------------------------------------------------


H : The Error Module
====================
- Main actions: stop program for some errors.


FUNCTIONS AND SUBROUTINES
-------------------------

- [ERR01]: subroutine Check_initial_errors ()
           Check for Initial Errors
